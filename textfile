



























S1
1. Immersive Presence
• Explain what makes a user feel "inside" the virtual world instead of just looking at
a screen.
• Use examples:
o High field of view (FOV) makes the world feel expansive.
o 6DoF (six degrees of freedom) allows users to move freely rather than just
rotating their head.
o Hand tracking and physics interactions make VR feel natural.
o Sound and haptic feedback increase immersion.
Example: "In a VR training simulation, realistic hand interactions and spatial audio
would enhance immersive presence by making users feel physically engaged."
2. Difference between Desktop VR & Mobile VR
• Desktop VR: High-end, requires powerful GPU & wired headset (e.g., HTC Vive,
Valve Index) → Better graphics, more accurate tracking, but expensive.
• Mobile VR: Runs on smartphones (Google Cardboard, Gear VR) → Lower quality,
wireless and portable, but limited interactivity.
Application: "If I were designing a VR experience for a high-end flight simulator, I would
use Desktop VR for realism and performance. But for quick, accessible experiences like
VR storytelling, Mobile VR would be a cost-effective option."
3. Oculus Quest 2 or Google Cardboard?
• Oculus Quest 2: Standalone, 6DoF, better graphics, hand tracking.
• Google Cardboard: Cheap, 3DoF, requires a phone, limited interactivity.
Choice with reasoning: "I would choose Oculus Quest 2 for interactive VR training
simulations since it supports room-scale tracking and hand interactions, making it more
immersive than Google Cardboard."
4. Essential Hardware Tools for VR Development
• VR Headset (Oculus, HTC Vive)
• High-end PC/GPU (for desktop VR)
• Motion controllers (for hand tracking)
• 3D modeling software (Blender, Maya, Unity/Unreal Engine)
• Sensors/Trackers (Lighthouse for precise movement tracking)
Application: "When developing a VR medical simulation, a high-performance PC and
hand-tracking controllers are essential to enable precise surgical hand movements."
5. Most Important 3D Coordinate Transformations
• Translation (Positioning objects in 3D space)
• Rotation (Spinning objects around an axis)
• Scaling (Resizing objects for perspective or effects)
Application: "In a VR racing game, I use translation to move cars forward, rotation for
steering, and scaling to adjust the size of objects based on distance to maintain realism."
6. Optimizing 3D Models for VR
• Reduce polygon count (too many polys slow performance).
• Use efficient textures (avoid high-res if unnecessary).
• Implement Level of Detail (LOD) (simpler models when objects are far away).
• Bake lighting to reduce real-time rendering load.
Application: "If I’m designing a VR museum, I would optimize models by reducing poly
count on statues while keeping textures detailed to balance performance and realism."
7. VR Input System
• Hand tracking (natural interaction, e.g., Oculus Quest 2).
• Motion controllers (grip buttons, triggers for object manipulation).
• Eye tracking (for gaze-based interactions).
• Voice commands (hands-free interactions).
Application: "In a VR firefighting training sim, motion controllers would allow users to
hold a fire extinguisher while eye tracking could help in aiming at fire zones."
8. Haptic Feedback & Audio Cues
• Haptic Feedback: Vibrations in controllers/gloves simulate touch.
• Spatial Audio: Sounds are positioned in 3D space (e.g., footsteps behind the
player).
Application: "In a horror VR game, I would use haptic feedback to make players feel
heartbeats when scared and spatial audio so they hear whispers from behind, increasing
immersion."
9. Motion Sickness in VR – Possible Causes
• Latency (if the display lags behind head movements).
• Field of View (FOV) issues (narrow FOV can make movement feel unnatural).
• Inconsistent Frame Rate (should be 90Hz+ to reduce dizziness).
• Mismatched Visual & Vestibular Cues (if movement on screen doesn’t match
inner ear balance signals).
Application: "In a VR roller coaster game, reducing sudden acceleration, keeping
frame rates high, and adding a fixed reference point (like a virtual cockpit) can reduce
motion sickness."
10. Performance Optimization Techniques for VR
• Reduce Draw Calls (combine meshes).
• Optimize Shaders & Textures (use baked lighting instead of real-time shadows).
• Use Occlusion Culling (hide objects not in the player’s view).
• Maintain High Frame Rate (90Hz minimum).
Application: "In a VR battlefield simulation, I would optimize performance by reducing
draw calls, using occlusion culling for distant objects, and baking lighting to ensure
smooth performance."
FINAL TIPS
• Apply concepts with examples (imagine you're developing a real VR experience).
• Think like a developer (mention performance, user experience, immersion).
• Use comparisons (e.g., "Oculus Quest is better for room-scale VR, but Google
Cardboard is cheaper and more portable").
• Explain how issues affect the user (e.g., "low frame rates cause motion sickness,
ruining immersion").












st2
1. History and Development of WebVR
WebVR emerged around 2014 as an experimental JavaScript API spearheaded by Mozilla, designed to bring VR directly into web browsers. It made it possible to use VR gear like the Oculus Rift and HTC Vive for immersive online experiences. Though WebVR was phased out in 2018 in favor of the more advanced WebXR, it played a key role in setting the groundwork for immersive web technologies by enabling VR without the need for standalone applications.

2. Three Key Features of the WebVR API

VRDisplay Interface: Grants developers access to connected VR devices and manages the rendering cycle.

Sensor Tracking: Monitors the user’s head movements to dynamically adjust what’s displayed.

Frame Submission: Ensures low-latency visuals by sending frames directly to the headset in real time.

3. Pros and Cons of Using Three.js for WebVR Museum Tours

Pros:

Makes building 3D environments and rendering with WebGL much easier.

Supported by a strong developer community and includes built-in tools for VR and WebXR integration.

Cons:

May not perform well with highly detailed scenes or on older smartphones.

Offers less fine-grained control than developing directly with WebGL or native engines.

4. Explaining WebVR to a Friend
Imagine browsing the web and instead of reading or watching content on a screen, you're stepping into a virtual space—exploring a museum or interacting with 3D objects—all within your browser. WebVR makes this kind of experience possible without needing to download anything extra.

5. Google Cardboard vs. High-End VR Headsets
Google Cardboard is a budget-friendly VR option that uses your phone to deliver simple VR experiences. It doesn’t support advanced features like motion tracking or high-resolution graphics. On the other hand, high-end VR headsets like the Meta Quest or HTC Vive provide a far more immersive experience with precise tracking and better visuals, though they come at a much higher cost and often require a powerful computer.

6. Basics of Stereo Rendering and Head Tracking in Google Cardboard
Stereo rendering works by creating two separate images—one for each eye—which tricks your brain into seeing depth. For head tracking, your phone’s sensors (like the gyroscope and accelerometer) detect movement and adjust the view accordingly, helping keep you immersed.

7. Using Cardboard SDK in Unity for a VR Museum
To develop with Unity, you’d start by importing the Cardboard SDK, set your project to run on mobile platforms, and utilize its built-in VR tools—like the VR camera prefab. The SDK streamlines VR development by handling things like user input (via gaze or touch) and visual adjustments for different lenses.

8. HTML5 VR vs. Unity with Cardboard SDK
Building a VR experience using HTML5 in a browser can be convenient, but you might face challenges like slower performance, lower visual quality, and browser compatibility issues. Unity paired with Cardboard delivers smoother graphics and better interactivity but usually requires the user to install an app.

9. Extra Tools to Enhance a VR Museum Tour

360° content: Using panoramic images or videos allows for immersive scenes without overloading performance.

Spatial Audio: Incorporating 3D sound helps create a more realistic experience and guides users through the environment.


